import { Injectable } from '@nestjs/common';
import { create } from 'xmlbuilder2';
import { NfseEntity } from '@/nfse/domain/entities/nfse.entity';

@Injectable()
export class XmlService {
  convertToXml(nfseEntity: NfseEntity): string {
    try {
      const xml = create({
        version: '1.0',
        encoding: 'utf-8',
      })
        .ele('soap:Envelope', {
          xmlns: 'http://schemas.xmlsoap.org/soap/envelope/',
          'xmlns:xsi': 'http://www.w3.org/2001/XMLSchema-instance',
          'xmlns:xsd': 'http://www.w3.org/2001/XMLSchema',
        })
        .ele('soap:Body')
        .ele('ConsultarNfsePorRpsResponse', {
          xmlns: 'https://www.e-governeapps2.com.br/',
        })
        .ele('ConsultarNfsePorRpsResult')
        .ele('CompNfse')
        .ele('Nfse')
        .ele('InfNfse')
        .ele('Numero')
        .txt(nfseEntity.number)
        .up()
        .ele('CodigoVerificacao')
        .txt(nfseEntity.verificationCode)
        .up()
        .ele('DataEmissao')
        .txt(nfseEntity.issueDate)
        .up()
        .ele('IdentificacaoRps')
        .ele('Numero')
        .txt(nfseEntity.rpsIdentification.number)
        .up()
        .ele('Serie')
        .txt(nfseEntity.rpsIdentification.series)
        .up()
        .ele('Tipo')
        .txt(nfseEntity.rpsIdentification.type)
        .up()
        .up()
        .ele('DataEmissaoRps')
        .txt(nfseEntity.issueDate)
        .up()
        .ele('NaturezaOperacao')
        .txt(nfseEntity.operationNature)
        .up()
        .ele('RegimeEspecialTributacao')
        .txt(nfseEntity.specialTaxRegime)
        .up()
        .ele('OptanteSimplesNacional')
        .txt(nfseEntity.simpleNationalOption)
        .up()
        .ele('IncentivadorCultural')
        .txt(nfseEntity.culturalIncentive)
        .up()
        .ele('Competencia')
        .txt(nfseEntity.competence)
        .up()
        .ele('NfseSubstituida')
        .txt(nfseEntity.replacedNfse)
        .up()
        .ele('Servico')
        .ele('Valores')
        .ele('ValorServicos')
        .txt(nfseEntity.services.values.serviceValue.toFixed(2))
        .up()
        .ele('NumeroDeducao')
        .txt(String(nfseEntity.services.values.deductionNumber || 0))
        .up()
        .ele('ValorDeducoes')
        .txt(nfseEntity.services.values.deductionValue.toFixed(2))
        .up()
        .ele('ValorPis')
        .txt(nfseEntity.services.values.pisValue.toFixed(2))
        .up()
        .ele('ValorCofins')
        .txt(nfseEntity.services.values.cofinsValue.toFixed(2))
        .up()
        .ele('ValorInss')
        .txt(nfseEntity.services.values.inssValue.toFixed(2))
        .up()
        .ele('ValorIr')
        .txt(nfseEntity.services.values.irValue.toFixed(2))
        .up()
        .ele('ValorCsll')
        .txt(nfseEntity.services.values.csllValue.toFixed(2))
        .up()
        .ele('IssRetido')
        .txt(nfseEntity.services.values.withheldIss.toString())
        .up()
        .ele('ValorIss')
        .txt(nfseEntity.services.values.issValue.toFixed(2))
        .up()
        .ele('ValorIssRetido')
        .ele('OutrasRetencoes')
        .txt(nfseEntity.services.values.otherRetentions.toFixed(2))
        .up()
        .ele('BaseCalculo')
        .txt(nfseEntity.services.values.calculationBase.toFixed(2))
        .up()
        .ele('Aliquota')
        .txt(nfseEntity.services.values.rate.toFixed(2))
        .up()
        .ele('ValorLiquidoNfse')
        .txt(nfseEntity.services.values.netNfseValue.toFixed(2))
        .up()
        .ele('DescontoIncondicionado')
        .txt(String(nfseEntity.services.values.unconditionalDiscount || 0))
        .up()
        .ele('DescontoCondicionado')
        .txt(String(nfseEntity.services.values.conditionalDiscount || 0))
        .up()
        .up()
        .ele('ItemListaServico')
        .txt(nfseEntity.services.serviceListItem)
        .up()
        .ele('CodigoCnae')
        .txt(String(nfseEntity.services.cnaeCode))
        .up()
        .ele('CodigoTributacaoMunicipio')
        .txt(nfseEntity.services.municipalTaxationCode)
        .up()
        .ele('Discriminacao')
        .txt(nfseEntity.services.description)
        .up()
        .ele('CodigoMunicipio')
        .txt(String(nfseEntity.services.municipalityCode))
        .up()
        .up()
        .ele('ValorCredito')
        .txt(nfseEntity.creditValue.toFixed(2))
        .up()
        .ele('PrestadorServico')
        .ele('IdentificacaoPrestador')
        .ele('Cnpj')
        .txt(nfseEntity.serviceProvider.providerIdentification.cnpj)
        .up()
        .ele('InscricaoMunicipal')
        .txt(
          nfseEntity.serviceProvider.providerIdentification
            .municipalRegistration,
        )
        .up()
        .up()
        .ele('NomeFantasia')
        .txt(nfseEntity.serviceProvider.tradeName)
        .up()
        .ele('Endereco')
        .ele('Endereco')
        .txt(nfseEntity.serviceProvider.address.street)
        .up()
        .ele('Numero')
        .txt(nfseEntity.serviceProvider.address.number)
        .up()
        .ele('Bairro')
        .txt(nfseEntity.serviceProvider.address.neighborhood)
        .up()
        .ele('CodigoMunicipio')
        .txt(String(nfseEntity.serviceProvider.address.municipalityCode))
        .up()
        .ele('Uf')
        .txt(nfseEntity.serviceProvider.address.state)
        .up()
        .ele('Cep')
        .txt(nfseEntity.serviceProvider.address.zipCode)
        .up()
        .up()
        .up()
        .ele('TomadorServico')
        .ele('IdentificacaoTomador')
        .ele('CpfCnpj')
        .ele('Cpf')
        .txt(nfseEntity.serviceRecipient.recipientIdentification.cpfCnpj.cpf)
        .up()
        .up()
        .up()
        .ele('RazaoSocial')
        .txt(nfseEntity.serviceRecipient.businessName)
        .up()
        .ele('Endereco')
        .ele('CodigoMunicipio')
        .txt(String(nfseEntity.serviceRecipient.address.municipalityCode))
        .up()
        .ele('Cep')
        .txt(nfseEntity.serviceRecipient.address.zipCode)
        .up()
        .up()
        .ele('Contato')
        .ele('Telefone')
        .txt(nfseEntity.serviceRecipient.contact?.phone || '')
        .up()
        .ele('Email')
        .txt(nfseEntity.serviceRecipient.contact?.email || '')
        .up()
        .up()
        .up()
        .up()
        .up()
        .up()
        .up()
        .up()
        .up()
        .end({ prettyPrint: true });

      return xml;
    } catch (error) {
      throw new Error('Error generating XML: ' + error.message);
    }
  }
}
